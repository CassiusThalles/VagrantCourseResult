$script_mysql = <<-SCRIPT
  apt-get update && \
  apt-get install -y mysql-server-5.7 && \
  sudo mysql -e "create user 'phpuser'@'localhost' identified by 'pass';"
SCRIPT

Vagrant.configure("2") do |config|
  # Configuration of the box
  # in this case, which OS will be used
  config.vm.box = "ubuntu/bionic64"

  config.vm.provider "virtualbox" do |vb|
    vb.memory = 512
    vb.cpus = 1
  end

  # config.vm.define "mysqldb" do |mysql|
    
  #   # Network configuration
  #   mysql.vm.network "forwarded_port", guest:3306, host:3306 #observar a necessidade de passar a porta do mysql
  #   mysql.vm.network "public_network", ip: "192.168.1.8"

  #   # VM provision
  #   mysql.vm.provision "shell", inline: "cat /configs/vagrant.pub >> .ssh/authorized_keys"

  #   # Installing MYSQL
  #   mysql.vm.provision "shell", inline: $script_mysql
  #   mysql.vm.provision "shell", inline: "cat /configs/mysqld.cnf > /etc/mysql/mysql.conf.d/mysqld.cnf"
  #   mysql.vm.provision "shell", inline: "service restart mysql"

  #   # VM Synced Folder configuration
  #   mysql.vm.synced_folder "./configs", "/configs"
  #   mysql.vm.synced_folder ".", "/vagrant", disabled: true
  # end

  config.vm.define "phpweb" do |phpweb|
    phpweb.vm.provider "virtualbox" do |vb|
      vb.memory = 1024
      vb.cpus = 1
      vb.name = "ubuntu_bionic_php"
    end
    # Network configuration
    phpweb.vm.network "forwarded_port", guest:8888, host:8089
    phpweb.vm.network "public_network", ip: "192.168.1.9"

    # Install Puppet
    phpweb.vm.provision "shell", inline: "sudo apt-get update"
    phpweb.vm.provision "shell", inline: "sudo apt-get install -y puppet"

    # Provision Puppet
    phpweb.vm.provision "puppet" do |puppet|
      puppet.manifests_path = "./configs/manifests/"
      puppet.manifest_file = "phpweb.pp"
    end
  end

  config.vm.define "mysqlserver" do |mysqlserver|
    mysqlserver.vm.network "public_network", ip: "192.168.1.10"

    # VM provision
    mysqlserver.vm.provision "shell", inline: "cat /vagrant/configs/vagrant.pub >> .ssh/authorized_keys"
  end

  config.vm.define "ansible" do |ansible|
    ansible.vm.network "public_network", ip: "192.168.1.11"

    # VM provision
    ansible.vm.provision "shell", inline: "cp /vagrant/vagrant /home/vagrant && \
                                               chmod 600 /home/vagrant/vagrant && \
                                               chown vagrant:vagrant /home/vagrant/vagrant"

    # Instalando o Ansible
    ansible.vm.provision "shell", inline: "sudo apt update"
    ansible.vm.provision "shell", inline: "sudo apt install software-properties-common -y"
    ansible.vm.provision "shell", inline: "sudo add-apt-repository --yes --update ppa:ansible/ansible"
    ansible.vm.provision "shell", inline: "sudo apt install ansible -y"
    ansible.vm.provision "shell", inline: "ansible-playbook -i /vagrant/configs/ansible/hosts \
    /vagrant/configs/ansible/playbook.yml"
  end

  config.vm.define "memcached" do |memcached|
    memcached.vm.box = "centos/7"

    memcached.vm.provider "virtualbox" do |vb|
      vb.memory = 512
      vb.cpus = 1
      vb.name = "centos7_memcached"
    end
  end

  config.vm.define "dockerhost" do |dockerhost|
    dockerhost.vm.provider "virtualbox" do |vb|
      vb.memory = 512
      vb.cpus = 1
      vb.name = "ubuntu_dockerhost"
    end

    dockerhost.vm.provision "shell", inline: "sudo apt-get update && \
    sudo apt-get install -y docker.io"
  end
end